datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

model Photo {
  id          String    @id @default(uuid())
  slug        String    @unique
  storagePath String
  width       Int
  height      Int
  capturedAt  DateTime?
  caption     String?
  exifRaw     Json?
  createdAt   DateTime  @default(now())
  variants    Variant[]
  keywords    Keyword[]
  published   Boolean  @default(false)
  priceDigitalJPY Int @default(11000)
  pricePrintA2JPY Int @default(55000)
  sellDigital     Boolean  @default(true)
  sellPanel       Boolean  @default(true)
}

model Variant {
  id          String @id @default(uuid())
  photoId     String
  type        String
  width       Int
  height      Int
  storagePath String
  bytes       Int
  Photo       Photo  @relation(fields: [photoId], references: [id], onDelete: Cascade)
}

model Keyword {
  id      String @id @default(uuid())
  photoId String
  word    String
  Photo   Photo  @relation(fields: [photoId], references: [id], onDelete: Cascade)

  @@index([word])
}

model Post {
  id          String   @id @default(cuid())
  slug        String   @unique
  title       String
  description String?
  heroPath    String?      // Blobのパス or public URL
  tags        String[]     // ["wall-decor","interior"] みたいに
  bodyMdx     String       // 記事本文 (MD/MDX)
  published   Boolean  @default(false)
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?   @db.Text
  access_token       String?   @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?   @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// === Orders ===
model Order {
  id              String   @id @default(cuid())
  sessionId       String   @unique            // Stripe Checkout Session ID
  paymentIntentId String?                      // Stripe PaymentIntent ID (optional)

  // 商品情報 / 識別
  itemType        String                        // "digital" | "panel" など（将来 enum でもOK）
  name            String?                       // 表示名
  slug            String?                       // Photo を特定するための slug

  // 購入者情報
  email           String?                       // 顧客メール

  // 金額情報
  amountJpy       Int                           // 支払い金額（JPY, 税込）
  currency        String   @default("jpy")     // 将来の多通貨拡張用

  // 追加情報
  shipping        Json?                         // 物理商品の配送先等（PaymentIntent.shipping）
  downloadToken   String?                         
  metadata        Json?                         // Checkout Session の metadata

  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now()) @updatedAt 

  status OrderStatus @default(paid)

  // --- Invoice / Billing (optional fields set by buyer) ---
  companyName       String?    // 宛名（会社名）
  department        String?    // 部署
  personName        String?    // 担当者名
  phone             String?    // 連絡先（任意）

  // --- Invoice lifecycle ---
  invoiceVersion       Int       @default(1)      // 再発行時に +1
  invoiceRevoked       Boolean   @default(false)  // 返金等で失効
  refundNoteIssuedAt   DateTime?                  // 返金伝票の発行日時

  // --- Relations ---
  tokens            AccessToken[]

  @@index([slug])
  @@index([email])
}

// アクセストークン種別（拡張しやすいように enum）
enum AccessTokenKind {
  digital       // デジタル画像ダウンロード
  invoice       // 領収書PDFダウンロード
  credit_note   // 返金伝票(PDF)ダウンロード
}

// ダウンロード/閲覧用のアクセストークン（回数・期限・失効を管理）
model AccessToken {
  id         String           @id @default(cuid())
  orderId    String
  kind       AccessTokenKind
  maxUses    Int              @default(1)
  used       Int              @default(0)
  expiresAt  DateTime?
  revoked    Boolean          @default(false)
  createdAt  DateTime         @default(now())

  order      Order            @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([kind])
  @@index([expiresAt])
}

enum OrderStatus {
  paid
  processing
  shipped
  canceled
}

model Inquiry {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String?
  message   String   @db.Text
  status    InquiryStatus @default(NEW)
  ip        String?       // 簡易レート制限・追跡用
  userAgent String?       // 調査用
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum InquiryStatus {
  NEW
  OPEN
  CLOSED
}