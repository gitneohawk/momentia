datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

model Photo {
  id          String    @id @default(uuid())
  slug        String    @unique
  storagePath String
  width       Int
  height      Int
  capturedAt  DateTime?
  caption     String?
  exifRaw     Json?
  createdAt   DateTime  @default(now())
  variants    Variant[]
  keywords    Keyword[]
  published   Boolean  @default(false)
  priceDigitalJPY Int @default(5000)
}

model Variant {
  id          String @id @default(uuid())
  photoId     String
  type        String
  width       Int
  height      Int
  storagePath String
  bytes       Int
  Photo       Photo  @relation(fields: [photoId], references: [id], onDelete: Cascade)
}

model Keyword {
  id      String @id @default(uuid())
  photoId String
  word    String
  Photo   Photo  @relation(fields: [photoId], references: [id], onDelete: Cascade)

  @@index([word])
}

model Post {
  id          String   @id @default(cuid())
  slug        String   @unique
  title       String
  description String?
  heroPath    String?      // Blobのパス or public URL
  tags        String[]     // ["wall-decor","interior"] みたいに
  bodyMdx     String       // 記事本文 (MD/MDX)
  published   Boolean  @default(false)
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?   @db.Text
  access_token       String?   @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?   @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}