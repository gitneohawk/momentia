name: Deploy to Azure Container Apps

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  RG: momentia-rg
  APP: momentia
  ACR: momentiaacr
  REPO: momentia

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Install Azure Container Apps CLI
        run: |
          set -euo pipefail
          az extension add -n containerapp --upgrade
          az provider register -n Microsoft.App || true

      - name: Use Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Prisma migrate deploy (PROD)
        env:
          DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}
        run: |
          npm ci --include=dev
          npx prisma migrate deploy

      # ACR でクラウドビルド（amd64ネイティブ、高速・安定）
      - name: Build image on ACR
        run: |
          set -euo pipefail
          TS=$(date +%Y%m%d-%H%M%S)-${GITHUB_SHA::7}
          echo "TAG=${TS}" >> $GITHUB_ENV
          az acr build -r "$ACR" -t "$REPO:${TS}" . --target runner

      # タグの出現を待ってから digest を取得（整合性遅延対策）
      - name: Resolve digest (wait until tag visible)
        id: digest
        run: |
          set -euo pipefail
          # (このステップの内容は変更なし)
          for i in $(seq 1 12); do
            CNT=$(az acr repository show-tags -n "$ACR" --repository "$REPO" \
              --query "[?@=='${TAG}'] | length(@)" -o tsv || echo 0)
            if [ "${CNT}" = "1" ]; then
              echo "Tag visible at attempt ${i}"
              break
            fi
            echo "Tag not visible yet (attempt ${i})"
            sleep 5
            if [ "$i" -eq 12 ]; then
              echo "Tag did not appear in ACR within timeout"; exit 2
            fi
          done
          DIGEST=$(az acr repository show-manifests -n "$ACR" --repository "$REPO" \
            --query "[?tags[?@=='${TAG}']].digest | [0]" -o tsv)
          if [ -z "$DIGEST" ]; then
            echo "Failed to resolve digest for tag ${TAG}"; exit 3
          fi
          echo "Resolved digest: $DIGEST"
          echo "DIGEST=${DIGEST}" >> $GITHUB_ENV
          echo "digest=${DIGEST}" >> $GITHUB_OUTPUT

      # digest で ACA 更新（タグの揺らぎを回避）
      - name: Update Azure Container App (by digest)
        run: |
          set -euo pipefail
          IMAGE="${ACR}.azurecr.io/${REPO}@${DIGEST}"
          az containerapp update -n "$APP" -g "$RG" --image "$IMAGE"

      # 最新リビジョンに100%振る（必要なら）
      - name: Route 100% traffic to latest
        run: |
          # (このステップの内容は変更なし)
          MODE=$(az containerapp show -n "$APP" -g "$RG" --query "properties.configuration.activeRevisionsMode" -o tsv 2>/dev/null || true)
          if [ -z "$MODE" ]; then
            MODE=$(az containerapp show -n "$APP" -g "$RG" --query "properties.template.revisionMode" -o tsv 2>/dev/null || true)
          fi
          echo "Detected revision mode: ${MODE:-unknown}"
          if [ "${MODE,,}" = "multiple" ]; then
            az containerapp ingress traffic set -n "$APP" -g "$RG" --revision-weight latest=100
          else
            echo "Single revision mode; skipping traffic split (latest already receives 100%)."
          fi

      - name: Verify DB schema is up to date
        env:
          DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}
        run: |
          set -euo pipefail
          npx prisma migrate status --schema prisma/schema.prisma

      - name: Show active revisions
        run: |
          az containerapp revision list -n "$APP" -g "$RG" \
            --query "[].{Name:name,Active:properties.active,Traffic:properties.trafficWeight}" -o table